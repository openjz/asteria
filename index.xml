<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>星</title>
        <link>http://blog.shiwj.top/</link>
        <description>星</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>shiwj1994@foxmail.com (shiwj)</managingEditor>
            <webMaster>shiwj1994@foxmail.com (shiwj)</webMaster><lastBuildDate>Mon, 26 Dec 2022 15:43:00 &#43;0800</lastBuildDate>
            <atom:link href="http://blog.shiwj.top/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>渲染管线介绍</title>
    <link>http://blog.shiwj.top/33.rendering-pipeline/</link>
    <pubDate>Mon, 26 Dec 2022 15:43:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/33.rendering-pipeline/</guid>
    <description><![CDATA[什么是渲染 广义上的渲染过程，既包括CPU参与部分，也包括GPU参与部分。通过图形API来调用GPU渲染管线， 广义的渲染分为六个步骤 应用阶段 顶]]></description>
</item>
<item>
    <title>如何部署unity生成的WebGL包</title>
    <link>http://blog.shiwj.top/32.unity-webgl-deploy/</link>
    <pubDate>Thu, 08 Dec 2022 12:29:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/32.unity-webgl-deploy/</guid>
    <description><![CDATA[使用IIS作为web服务器。 IIS的全称是Internet Information Services，是windows自带的web服务器。 第一步，打包 File -&gt; Build Settings&hellip; -&gt; WebGL -&gt;]]></description>
</item>
<item>
    <title>线性代数的几何意义</title>
    <link>http://blog.shiwj.top/31.linear-algebra-3b1b/</link>
    <pubDate>Wed, 16 Nov 2022 09:12:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/31.linear-algebra-3b1b/</guid>
    <description><![CDATA[参考 b 站 3Blue1Brown-线性代数的本质 https://github.com/3b1b/manim 向量 向量（vector）的起点永远是原点（origin），因此我们将向量表示为终点的坐标 $$\vec{a}= \begin{bmatrix}]]></description>
</item>
<item>
    <title>有栈协程和无栈协程</title>
    <link>http://blog.shiwj.top/30.coroutine-stack/</link>
    <pubDate>Tue, 01 Nov 2022 02:35:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/30.coroutine-stack/</guid>
    <description><![CDATA[有栈协程 有栈协程是指给每个协程开辟一个单独的栈空间，需要一套调度机制来对协程进行调度，类似线程调度。 有栈协程之间是相互独立的，不存在调用关系]]></description>
</item>
<item>
    <title>关于C&#43;&#43;前向声明</title>
    <link>http://blog.shiwj.top/29.cpp-forward-declaration/</link>
    <pubDate>Sun, 30 Oct 2022 15:01:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/29.cpp-forward-declaration/</guid>
    <description><![CDATA[如果有两个类相互之间发生了引用，可能会产生一些问题。《C++ primer 第5版》中12.1.1节和12.1.6节给出的例子就出现了这种情况。在这两节中]]></description>
</item>
<item>
    <title>关于C&#43;&#43; inline关键字</title>
    <link>http://blog.shiwj.top/28.cpp-inline/</link>
    <pubDate>Sun, 30 Oct 2022 11:38:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/28.cpp-inline/</guid>
    <description><![CDATA[inline，内联，早期inline关键字是给编译器的内联建议，编译器会视情况将函数在调用处展开。 但是现在没有编译器会听从用户的建议。 inl]]></description>
</item>
<item>
    <title>c&#43;&#43;中的const</title>
    <link>http://blog.shiwj.top/27.cpp-const/</link>
    <pubDate>Sat, 29 Oct 2022 10:16:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/27.cpp-const/</guid>
    <description><![CDATA[const 引用参数 函数的 const 引用参数有两个作用 对调用者承诺不会修改变量 允许调用者传一个右值作为参数，例如常量、字面量、临时对象、匿名对象 例如 1 2 3 4 5]]></description>
</item>
<item>
    <title>c&#43;&#43;中的拷贝和移动语义</title>
    <link>http://blog.shiwj.top/26.cpp-copy-move/</link>
    <pubDate>Fri, 28 Oct 2022 15:19:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/26.cpp-copy-move/</guid>
    <description><![CDATA[demo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class A{ public: A(const A&amp; b):e(new int(*(b.e))){} A &amp; operator=(const A &amp; b){ if(this != *b){ int * c = new int(*(b.e)); delete e; e = c; } return *this; } A(A &amp;&amp;b) noexcept :e(b.e){ b.e = nullptr; } A &amp; operator=(A &amp;&amp; b)]]></description>
</item>
<item>
    <title>c&#43;&#43;中符号重定义问题</title>
    <link>http://blog.shiwj.top/25.cpp-dup-symbols/</link>
    <pubDate>Fri, 28 Oct 2022 14:35:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/25.cpp-dup-symbols/</guid>
    <description><![CDATA[在开发比较大的项目时，有时候会出现多动态库之间定义了重复名字的情况，或者动态库和主程序之间定义了重复名字的情况。 在gcc上验证 编译器版本是g]]></description>
</item>
<item>
    <title>c&#43;&#43;中的static</title>
    <link>http://blog.shiwj.top/24.cpp-static/</link>
    <pubDate>Fri, 28 Oct 2022 12:52:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/24.cpp-static/</guid>
    <description><![CDATA[static static 变量的生命周期从初始化起一直持续到程序执行结束 static 变量存放在数据区，分为已初始化的全局变量区（data 段）和未初始化的全局变量区（bss 段]]></description>
</item>
</channel>
</rss>
