<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>主页 on 星星</title>
    <link>http://blog.shiwj.top/</link>
    <description>Recent content in 主页 on 星星</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="http://blog.shiwj.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法题</title>
      <link>http://blog.shiwj.top/posts/algorithm-problem/</link>
      <pubDate>Wed, 06 Jul 2022 11:37:09 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/algorithm-problem/</guid>
      <description>寻找两个正序数组的中位数 #  给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的中位数
方法1-归并法 #  方法1，按归并的思路，每次排除一个数，直到找到中位数为止。时间复杂度O(m+n)
方法2-改良的归并法 #  方法1是一种比较符合直觉的方法，更进一步，我们考虑每次多排除一些数，以提高算法的执行速度。
寻找中位数问题可以视为寻找第k大数问题的特殊情况，现在设中位数是第k大的数为Kth，我们每次比较k/2个数，就能每次排除掉k/2个数。随着被排除的数逐渐增多，k会逐渐变小，当k变为1的时候，比较最后一次，就找到了Kth。由于k每次缩小一半，时间复杂度为O(log(m+n))
这里面有一个关键问题，为什么比较步长是k/2？
为了解释这个问题，先看一个例子，
A：1，2，3，8 B：4，5，6，7 有递增序列A和B，现在我们想找到第4大的数（即4），如果将比较步长设置为4，即直接比较7和8，会导致4,5,6,7全都被排除掉，最后无法找到4。所以我们必须设置合理的比较步长，来避免这种情况。
下面说明为什么是k/2
在对位于比较点的两个数做比较后，我们会将较小数及其之前的数排除掉。为了保证一定能够排除较小数及其之前的数，我们必须保证Kth不在被排除的数中，换言之，我们一定不能让位于比较点的两个数都大于Kth。
假设有以下两个序列
A：a0,a1,...,am B: b0,b1,...,bn 假设比较步长为p，位于比较点的两个数是ap，bp，现在对Kth所在位置分情况讨论
 ap和bp都在Kth之前 ap在Kth之前，bp在Kth之后（即Kth∈[b0,bp]） ap在Kth之后（即Kth∈[a0,ap]），bp在Kth之前  情况1不做讨论，排除哪个都行。
情况2和情况3是等价的，现在假设Kth∈[a0,ap]，即a0 &amp;lt;= kth &amp;lt;= ap，如果我们想排除[b0,bp]，就必须保证bp &amp;lt;= Kth &amp;lt;= ap，即不能让位于比较点的两个数都大于等于Kth
当比较步长p为k/2时，[a0,ap]和[b0,bp]加起来一共k个数，如果ap和bp都大于Kth，[a0,ap]和[b0,bp]加起来一定会超过k个数，前后矛盾。所以当比较步长为k/2时必不可能出现比较点的两个数都大于Kth这个情况，反之当比较步长大于k/2时，被比较的两个子序列的数字量大于k，就有可能出现这个情况。
相应的，如果有三个有序数列，比较步长最长为k/3，有四个序列，比较步长最长为k/4，以此类推。
方法3-二分法 #  方法2是将问题转化为求第K大的数，而方法3是利用了中位数的以下性质：
 中位数两边的数个数相等 中位数左边最大的数小于右边最小的数、  具体方法是分别将序列1和序列2一分为2，将左序列1+左序列2视为左半部分，将右序列1+右序列2视为右半部分，保证左半部分的数字个数等于右半部分的数字个数，并且左半部分的最大值大于右半部分的最小值。
那如何找到切分位置？在较短序列上进行二分搜索即可</description>
    </item>
    
    <item>
      <title>Unity入门笔记</title>
      <link>http://blog.shiwj.top/posts/unity-note/</link>
      <pubDate>Sun, 26 Jun 2022 10:48:30 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/unity-note/</guid>
      <description>本文约定 #  粗体代表术语
编辑器操作 #  场景视图导航 #   pan（移动视图）：使用“手”工具，按住鼠标左键拖动视图 zoom（放缩）：使用鼠标滚轮或按住alt和鼠标右键拖动 orbit（环绕物体）：按住alt和鼠标左键拖动 focus（聚焦）：按F聚焦到一个对象  flythrough mode（飞越模式）：飞越模式是指第一人称视角，飞越模式的所有操作都需要按住鼠标右键
 按住鼠标右键拖动来环顾四周 用wasd前进后退左移右移 用qe上升下降 按住shift移动得更快  场景视图工具 #   快捷键Q，移动相机 快捷键W，移动 快捷键E，旋转 快捷键R，拉伸 快捷键T，2D拉伸 快捷键Y，移动+旋转+拉伸  概念 #   primitive object（原始对象）  Primitive object是基本3D形状的游戏对象，例如立方体（cube）和球体（sphere），可以将它们添加到场景中作为后续导入资源的占位对象。 如何在创建中创建：在hierarchy的空白处右键，选择3D object，选择一个原始对象    参考 #    unity manual  unity-essentials -&amp;gt; Get started with Unity -&amp;gt; project start creating -&amp;gt; Tutorial·Get started in the Unity Editor  </description>
    </item>
    
    <item>
      <title>事业编计算机八股</title>
      <link>http://blog.shiwj.top/posts/kaobian-cs/</link>
      <pubDate>Tue, 21 Jun 2022 19:21:16 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/kaobian-cs/</guid>
      <description>操作系统 #  操作系统的发展：单道批处理系统，多道批处理系统，分时系统，实时系统，通用操作系统
简答 #  1. 程序是怎么控制计算机的 #  要点：
 程序是指令和数据的有序集合，执行时被装载到内存中 cpu执行指令的过程，取值，译码，执行，取下一条指令，循环往复  </description>
    </item>
    
    <item>
      <title>数字签名和数字证书</title>
      <link>http://blog.shiwj.top/posts/digital-signatures-certificates/</link>
      <pubDate>Sat, 18 Jun 2022 14:28:00 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/digital-signatures-certificates/</guid>
      <description>一、数字签名 #  数字签名的作用是保证数据的完整性和保密性
数据完整性通过对数据做摘要保证
数据的保密性通过对数据和摘要做公钥加密保证，接收人只能用发送人提供的公钥才能解密消息，用其他人提供的公钥无法解密消息
具体的交互流程是
 发送人对消息做加密和摘要，生成数字签名和加密信息，并将签名和信息一起发送给接收人 接收人收到消息后，使用发送人的公钥校验数字签名，校验通过后，即可证明消息的完整性 接收人对消息进行解密，查看消息，对消息做出答复，并用发送人的公钥对答复加密，回复给发送人  二、数字证书 #  在使用数字签名的过程中存在一个问题，即接收人无法判断发送人的公钥是否可信，换言之，发送人提供的公钥有可能被篡改或伪造。数字证书就是为了解决公钥的可信性问题而被发明出来的。
具体的做法是，由一个权威的证书颁发机构（CA）使用它自己的公钥对发送人的公钥做一个数字签名，并将这个数字签名作为证书颁发给发送人，发送人给接收人发送消息时，将证书一并附上，由接收人去验证。CA会为其自己的公钥颁发一个根证书，提前提供给用户，用户从根证书中获取到CA的公钥，对CA颁发的证书进行验证。
简单来说，用户先从根证书中拿到CA的公钥，再利用CA的公钥从服务器证书中拿到服务器的公钥，然后再用服务器公钥和服务器通信。
三、https协议 #  https和http的区别 #   https在http的基础上增加了SSL/TLS协议，SSL/TLS依靠证书验证服务器身份，并对浏览器和服务器之间的通信进行加密 https使用443端口，http使用80端口  SSL/TLS #   SSL，Secure Sockets Layer TLS，Transport Layer Security SSL/TLS是对因特网上的数据传输进行身份验证和加密的协议，SSL/TLS是对ssl和tls的统称，tls更先进，更安全的ssl，正在逐渐取代ssl SSL/TLS有多个版本，使用 How’s My SSL工具查看你的浏览器使用的是哪个SSL/TLS版本 SSL/TLS的握手过程  客户端和服务器互相告知各自支持的SSL/TLS版本，加密算法和压缩算法 客户端验证服务器证书，并获得服务器公钥 双方通过协商生成会话秘钥（会话秘钥是一个对称秘钥，对称加密比公钥加密快） 双方使用会话秘钥进行加密通信    </description>
    </item>
    
    <item>
      <title>行测技巧</title>
      <link>http://blog.shiwj.top/posts/kaobian-xingce-tips/</link>
      <pubDate>Wed, 15 Jun 2022 14:24:30 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/kaobian-xingce-tips/</guid>
      <description>一、速算技巧 #  1.1 求解对象 #   基期、现期、增长量、增长率 平均值、比重  1.2 选项差距 #  差距大：
 四个选项首位均不同 首位相同，第二位的差大于首位  差距小：
 存在首位相同的选项，且选项的第二位差小于等于首位。  1.3 运算技巧 #   直除  应用场景：多位数除法（三位数以上） 方法：分母保留2位或3位有效数字 选项差距大，四舍五入保留2位；选项差距小，四舍五入保留3位；   多位数求和  应用场景：123.4+567.8+901.2 方法：先对各个位求和，从百位求起，然后将各个位的求和结果错位相加   尾数求和  应用场景：多个多位数相加，选项精确到了最后一位并且尾数各不相同 方法：只对尾数求和   增长量计算-假设法  应用场景：现期15048，同比增长率20.5%，求现期和基期的差 方法：先假设一个基期（通常假设一个整数），求出增量；对余量，重复这个过程。适用于选项差距小的情况   增长量计算-百分数化简为分数  适用于选项差距大、增长率绝对值大于等于5%的情况   \[\frac{1}{3}=33.3\%,\frac{1}{6}=16.7\%,\frac{1}{7}=14.3\%\]   \[\frac{1}{8}=12.5\%,\frac{1}{9}=11.1\%,\frac{1}{11}=9.1\%\]   \[\frac{1}{12}=8.</description>
    </item>
    
    <item>
      <title>计算机中的时间</title>
      <link>http://blog.shiwj.top/posts/time/</link>
      <pubDate>Wed, 08 Jun 2022 12:29:06 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/time/</guid>
      <description>unix时间戳 #  unix时间戳是相对于UTC时间&amp;quot;1970年1月1日 00:00:00&amp;quot;所经过的秒数。由于是相对于UTC时间，各时区的计算机在同一时刻获取到的时间戳都是相同的。
unix时间戳不存在时区问题，因此在传递时间参数的时候，传时间戳明显比传格式化的时间字符串更方便，更明确
2038年问题 #  相当一部分unix操作系统使用32位有符号整型保存时间戳，因此时间戳的值最大也只有2147483647，换算成UTC时间为&amp;quot;2038-01-19 03:14:07&amp;quot;，一旦超过这个时间，这些系统的时间戳就会变成一个无效值，可能会导致程序出错，这就是2038年问题。
 这有点类似于千年虫问题，2000年以前，很多计算机程序由于程序设计有问题，在时间超过2000年1月1日零点之后，程序会因为无法正确处理时间导致处理出错或程序崩溃（例如有些程序只用年份的后两位表示年份，导致2000年会被误认为是1900年）
 </description>
    </item>
    
    <item>
      <title>golang入门笔记</title>
      <link>http://blog.shiwj.top/posts/gopl/</link>
      <pubDate>Tue, 26 Apr 2022 11:18:48 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/gopl/</guid>
      <description>参考《Go程序设计语言》
一、程序结构 #   go程序使用驼峰式命名风格 零值，变量的初始值。数字是0，字符串是&amp;quot;&amp;quot;，布尔值是false，接口（interface）和引用类型（slice、指针、map、通道、函数）是nil，数组和结构体的零值是其所有元素或成员的零值 短变量声明，a,b := f()，a和b中至少有一个得是新变量，不能全是已经声明的变量  一个例外，如果a,b是在外层作用域声明的，:=会将它们声明为新变量   指针。函数返回局部变量的地址是安全的（见 6.变量的生命周期） new函数，new函数创建一个新值并返回其地址 变量的生命周期通过其是否可达确定（变量可以在其初次声明的作用域之外存活），编译器根据变量生命周期确定变量在栈上还是堆上分配，而不是根据声明变量的时候使用的是var还是new 多重赋值，例如a,b := 1,&amp;quot;xxx&amp;quot;或x,y = y,x，后者用来交换变量的值 类型转换，var a T = T(b)，每个类型都会提供T(x)将x的值转换为T（前提是允许这种转换） 导出的标识符才能在包外被访问到，导出的标识符以大写字母开头 包初始化，从初始化包级别变量开始，优先按照依赖顺序初始化变量，然后按照声明顺序初始化变量 init函数，可以有任意个，在程序启动时按照声明顺序自动执行 包的初始化按导入顺序进行，依赖顺序优先（类似包级别变量初始化）  二、基本数据 #  2.1 整型 #   int8、int16、int32、int64、uint8、uint16、uint32、uint64 int和uint，在不同平台上大小不同（通常是32位或64位） rune，等价于int32，表示一个unicode码点 byte，等价于uint8，表示一个原始的字节 uintptr，可以存放一个指针，用于底层编程 golang中%运算结果的正负号总是和被除数一致 位运算。&amp;amp;是与运算（AND），|是或运算（OR），^是异或和非运算（XOR，NOT），&amp;amp;^是与非运算（AND NOT），&amp;lt;&amp;lt;是左移，&amp;gt;&amp;gt;是右移  1和a做异或等价于对a取反，即1^a = ^a（这里的1和a是单独的一位） 与非运算的作用是按右操作数的位分布清空左操作数中的对应位 右移操作&amp;gt;&amp;gt;  有符号数右移按符号位填补空位（因为移的是补码，补码补1就等于原码补0） 右移操作x&amp;gt;&amp;gt;n等价于x/2^n，向下取整（朝负无穷方向取整，例如-5&amp;raquo;1结果为-3）      2.2 浮点型 #   两种浮点型，float32和float64 math包给出了浮点型的极限值，例如math.MaxFloat32 特殊值：正无穷、负无穷、无意义（+Inf、-Inf、NaN）。超出极限值的数和除以零的商归为正负无穷，0/0或sqrt(-1)为无意义  2.</description>
    </item>
    
    <item>
      <title>数据库事务</title>
      <link>http://blog.shiwj.top/posts/db-transaction/</link>
      <pubDate>Wed, 20 Apr 2022 11:57:47 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/db-transaction/</guid>
      <description>事务（transaction）的目的是要保证一连串数据操作的原子性，并能够支持操作回滚
事务的并发问题 #   脏读：当前事务可以读取到其他事务未提交的数据 不可重复读：当前事务前后两次使用相同的查询语句查到了不同的数据，原因是在事务执行过程中，有其他事务对这批数据做了增删改操作。如果当前事务的两次读操作分别发生在其他事务开始前和提交后，读到的数据不一致，这就不算脏读，属于不可重复读问题。 幻读：事务进行读操作发现数据不存在，试图插入数据，但是插入失败，或者事务发现数据存在，试图更新数据，但更新失败，原因是事务读数据后，有其他事务对数据做了增删操作。即使数据库能够保证不发生脏读和不可重复读,仍有可能发生幻读，现象是每次读数据结果都是不存在，但就是不能插入数据，或者是每次读数据结果都是存在，但就是更新不了。  </description>
    </item>
    
    <item>
      <title>mysql入门笔记</title>
      <link>http://blog.shiwj.top/posts/mysql-note/</link>
      <pubDate>Fri, 10 Dec 2021 10:09:46 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/mysql-note/</guid>
      <description>参考《mysql必知必会》
一、基本概念 #  模式（schema）：这个概念比较模糊，一个比较常见的定义是，schema是指数据库对象的集合，其中包括表、视图、存储过程、索引等。schema通常是指数据库或表的布局和结构等信息。
主键（primary key）：主键定义在表的一列上，用来唯一地标识每一行，因此主键的值不能重复，每一行对应的主键值都是唯一的。
 主键有几个使用习惯，（1）不更新主键，（2）一般把主键定义在自增id列上
 外键（foreign key）：外键是表中的一个字段，对应另一个表的主键。
 可伸缩性（scale），一个设计良好的数据库能够良好应对数据量的增加，我们把这种情况称为数据库的可伸缩性好，可伸缩性离不开外键的使用。
  检索性能可能会受多种因素影响：检索操作（子查询、联表查询&amp;hellip;），数据量，是否有索引或键
 子句（clause）：SQL由子句构成，例如from、order by等。
完全限定列名：表名.列名，video.md5
二、mysql工具 #  mysql安装包中自带一个命令行工具mysql，这是一个运行在命令行的mysql客户端。
 命令用;或\g结束，\G可以使横向表格纵向输出 输入help或\h查看帮助 输入quit或exit退出  mysql默认端口是3306
三、使用mysql #  一些关于数据库和表的命令：
 选择数据库：use xxx; 查看（show）  所有数据库：show databases; 所有表：show tables; 表的列：show columns from xxx;  和desc xxx;作用相同   服务器状态：show status; 权限：show grants; 数据库和表的创建语句：show create database/table xxx; 服务器错误和告警：show errors/warnings; help show    四、检索（select） #  简单select #  select field1 from table_hello; select field1,field2,field3 from table_hello; select * from table_hello; 字段前面可以加上表名，例如</description>
    </item>
    
    <item>
      <title>css入门笔记</title>
      <link>http://blog.shiwj.top/posts/css-note/</link>
      <pubDate>Sun, 14 Nov 2021 10:09:46 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/css-note/</guid>
      <description>参考 MDN教程
一、导入 css #  1、导入外部样式：
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;styles.css&amp;#34; /&amp;gt; 2、内部样式
使用 style 元素
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;My CSS experiment&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; h1 { color: blue; background-color: yellow; border: 1px solid black; } p { color: red; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; ... &amp;lt;/html&amp;gt; 3、内联样式
使用 style 属性
&amp;lt;h1 style=&amp;#34;color: blue;background-color: yellow;border: 1px solid black;&amp;#34;&amp;gt; Hello World! &amp;lt;/h1&amp;gt; 语法 #  1、选择器+大括号，属性:值;
h1 { color: red; font-size: 5em; } 2、函数</description>
    </item>
    
  </channel>
</rss>
