<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - 星</title>
        <link>http://blog.shiwj.top/posts/</link>
        <description>All Posts | 星</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>shiwj1994@foxmail.com (shiwj)</managingEditor>
            <webMaster>shiwj1994@foxmail.com (shiwj)</webMaster><lastBuildDate>Fri, 04 Jul 2025 08:49:36 &#43;0800</lastBuildDate><atom:link href="http://blog.shiwj.top/posts/" rel="self" type="application/rss+xml" /><item>
    <title>无锁环形buffer</title>
    <link>http://blog.shiwj.top/71.lockfree-ringbuffer/</link>
    <pubDate>Fri, 04 Jul 2025 08:49:36 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/71.lockfree-ringbuffer/</guid>
    <description><![CDATA[无锁环形队列介绍 无锁环形队列提高并发效率主要依赖以下两点： 环形队列本身是个缓冲区，可以将生产者和消费者解耦，天然具备并发读写的条件 采用CAS]]></description>
</item>
<item>
    <title>《设计模式》阅读笔记</title>
    <link>http://blog.shiwj.top/70.design-patterns/</link>
    <pubDate>Fri, 30 May 2025 15:22:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/70.design-patterns/</guid>
    <description><![CDATA[参考《设计模式——可复用面向对象软件的基础》 前述 设计模式整体看下来，主要讲的是该如何组织代码，如何将代码组织成可复用、可维护、可扩展的代码。]]></description>
</item>
<item>
    <title>c&#43;&#43;内存分析：VLD</title>
    <link>http://blog.shiwj.top/69.cpp-memory-analysis-vld/</link>
    <pubDate>Wed, 14 May 2025 10:56:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/69.cpp-memory-analysis-vld/</guid>
    <description><![CDATA[参考 https://www.cnblogs.com/yapingxin/p/18258139/use_vld_in_vs2022 介绍 Visual Leak Detector（VLD）是windows平台上的一款广泛使用的c++内存泄漏分析工具 VLD官方的版本目前停留在2.5.1，发]]></description>
</item>
<item>
    <title>c&#43;&#43;内存分析：ASan</title>
    <link>http://blog.shiwj.top/68.cpp-memory-analysis-asan/</link>
    <pubDate>Tue, 13 May 2025 15:45:47 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/68.cpp-memory-analysis-asan/</guid>
    <description><![CDATA[AddressSanitizer（ASan）是一款广泛使用的c++内存分析工具，能够检测代码中的各种内存问题（内存越界、访问野指针、非法访问]]></description>
</item>
<item>
    <title>c&#43;&#43; 运算符重载使用技巧</title>
    <link>http://blog.shiwj.top/67.cpp-operator-overloading-tricks/</link>
    <pubDate>Sun, 11 May 2025 08:59:23 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/67.cpp-operator-overloading-tricks/</guid>
    <description><![CDATA[1. 基本概念 只有一元和二元运算符能被重载，三元运算符不能重载 对于二元运算符， 重载运算符函数的第一个参数对应左侧运算对象，如果是成员函数重载，只]]></description>
</item>
<item>
    <title>c&#43;&#43; STL使用技巧</title>
    <link>http://blog.shiwj.top/66.cpp-stl-tricks/</link>
    <pubDate>Mon, 05 May 2025 14:39:26 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/66.cpp-stl-tricks/</guid>
    <description><![CDATA[参考 《C++ Primer 第5版》 1. 容器类型 顺序容器 连续内存 vector deque：双端队列 array：固定大小 string 链表 list：双向链表 forward_list：]]></description>
</item>
<item>
    <title>c&#43;&#43;模板使用技巧</title>
    <link>http://blog.shiwj.top/65.cpp-template-tricks/</link>
    <pubDate>Sun, 04 May 2025 02:20:30 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/65.cpp-template-tricks/</guid>
    <description><![CDATA[参考 《C++ Primer 第5版》 《Effective Modern C++》 0. 模板类型推导规则 参考 62.effective-modern-cpp 1. 非类型参数 例如，利用模板推导数组长度 1 2 3 4 5 template&lt;typename T, std::size_t N&gt; constexpr std::size_t ArraySize(T(&amp;)[N]) noexcept]]></description>
</item>
<item>
    <title>微积分学习笔记</title>
    <link>http://blog.shiwj.top/64.calculus/</link>
    <pubDate>Fri, 02 May 2025 01:36:05 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/64.calculus/</guid>
    <description><![CDATA[参考《普林斯顿微积分读本》 这篇笔记主要记录微积分中的一些定义、定理和结论。 有理函数：形如$\frac{p(x)}{q(x)}$，其中 $p$ 和 $q$ 为]]></description>
</item>
<item>
    <title>理解仿射变换</title>
    <link>http://blog.shiwj.top/63.affine-transformation/</link>
    <pubDate>Sat, 19 Apr 2025 07:54:00 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/63.affine-transformation/</guid>
    <description><![CDATA[参考 如何通俗地讲解「仿射变换」？ - 马同学的回答 - 知乎 前言 最近看了一些unity shader相关的教程，发现unity中的变换矩阵全部都用的是]]></description>
</item>
<item>
    <title>《Effective Modern C&#43;&#43;》阅读笔记</title>
    <link>http://blog.shiwj.top/62.effective-modern-cpp/</link>
    <pubDate>Wed, 09 Apr 2025 16:22:06 &#43;0800</pubDate>
    <author>shiwj</author>
    <guid>http://blog.shiwj.top/62.effective-modern-cpp/</guid>
    <description><![CDATA[条款1：模板类型推导 c++模板类型推导经常用在模板函数类型推导，和auto类型推导 函数模板一般是以下形式 1 2 template&lt;typename T&gt; void f(ParamType param); ParamType和T]]></description>
</item>
</channel>
</rss>
