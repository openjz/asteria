<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 星星</title>
    <link>http://blog.shiwj.top/tags/golang/</link>
    <description>Recent content in golang on 星星</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 26 Apr 2022 11:18:48 +0800</lastBuildDate><atom:link href="http://blog.shiwj.top/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang入门笔记</title>
      <link>http://blog.shiwj.top/posts/gopl/</link>
      <pubDate>Tue, 26 Apr 2022 11:18:48 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/gopl/</guid>
      <description>参考《Go程序设计语言》
一、程序结构 #   go程序使用驼峰式命名风格 零值，变量的初始值。数字是0，字符串是&amp;quot;&amp;quot;，布尔值是false，接口（interface）和引用类型（slice、指针、map、通道、函数）是nil，数组和结构体的零值是其所有元素或成员的零值 短变量声明，a,b := f()，a和b中至少有一个得是新变量，不能全是已经声明的变量  一个例外，如果a,b是在外层作用域声明的，:=会将它们声明为新变量   指针。函数返回局部变量的地址是安全的（见 6.变量的生命周期） new函数，new函数创建一个新值并返回其地址 变量的生命周期通过其是否可达确定（变量可以在其初次声明的作用域之外存活），编译器根据变量生命周期确定变量在栈上还是堆上分配，而不是根据声明变量的时候使用的是var还是new 多重赋值，例如a,b := 1,&amp;quot;xxx&amp;quot;或x,y = y,x，后者用来交换变量的值 类型转换，var a T = T(b)，每个类型都会提供T(x)将x的值转换为T（前提是允许这种转换） 导出的标识符才能在包外被访问到，导出的标识符以大写字母开头 包初始化，从初始化包级别变量开始，优先按照依赖顺序初始化变量，然后按照声明顺序初始化变量 init函数，可以有任意个，在程序启动时按照声明顺序自动执行 包的初始化按导入顺序进行，依赖顺序优先（类似包级别变量初始化）  二、基本数据 #  2.1 整型 #   int8、int16、int32、int64、uint8、uint16、uint32、uint64 int和uint，在不同平台上大小不同（通常是32位或64位） rune，等价于int32，表示一个unicode码点 byte，等价于uint8，表示一个原始的字节 uintptr，可以存放一个指针，用于底层编程 golang中%运算结果的正负号总是和被除数一致 位运算。&amp;amp;是与运算（AND），|是或运算（OR），^是异或和非运算（XOR，NOT），&amp;amp;^是与非运算（AND NOT），&amp;lt;&amp;lt;是左移，&amp;gt;&amp;gt;是右移  1和a做异或等价于对a取反，即1^a = ^a（这里的1和a是单独的一位） 与非运算的作用是按右操作数的位分布清空左操作数中的对应位 右移操作&amp;gt;&amp;gt;  有符号数右移按符号位填补空位（因为移的是补码，补码补1就等于原码补0） 右移操作x&amp;gt;&amp;gt;n等价于x/2^n，向下取整（朝负无穷方向取整，例如-5&amp;raquo;1结果为-3）      2.2 浮点型 #   两种浮点型，float32和float64 math包给出了浮点型的极限值，例如math.MaxFloat32 特殊值：正无穷、负无穷、无意义（+Inf、-Inf、NaN）。超出极限值的数和除以零的商归为正负无穷，0/0或sqrt(-1)为无意义  2.</description>
    </item>
    
  </channel>
</rss>
