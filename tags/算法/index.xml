<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>算法 on Example Site</title>
        <link>http://blog.shiwj.top/tags/%E7%AE%97%E6%B3%95/</link>
        <description>Recent content in 算法 on Example Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 06 Jul 2022 11:37:09 +0800</lastBuildDate><atom:link href="http://blog.shiwj.top/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>算法题</title>
        <link>http://blog.shiwj.top/posts/algorithm-problem/</link>
        <pubDate>Wed, 06 Jul 2022 11:37:09 +0800</pubDate>
        
        <guid>http://blog.shiwj.top/posts/algorithm-problem/</guid>
        <description>&lt;h2 id=&#34;常用方法&#34;&gt;常用方法&lt;/h2&gt;
&lt;p&gt;常用方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;动态规划，把问题转化为子问题的求解，在子问题求解完成的基础上即可得到问题的解，重点在于（1）问题的建模，（2）求出正确的递推方程，（3）搞清楚基本问题的解&lt;/li&gt;
&lt;li&gt;双指针，重点在于搞清楚什么时候移动哪个指针&lt;/li&gt;
&lt;li&gt;二分&lt;/li&gt;
&lt;li&gt;回溯&lt;/li&gt;
&lt;li&gt;分治&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用辅助工具：排序，map，堆，栈，队列&lt;/p&gt;
&lt;h2 id=&#34;leetcode-4寻找两个正序数组的中位数&#34;&gt;leetcode 4.寻找两个正序数组的中位数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的中位数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;方法1-归并法&#34;&gt;方法1-归并法&lt;/h3&gt;
&lt;p&gt;方法1，按归并的思路，每次排除一个数，直到找到中位数为止。时间复杂度O(m+n)&lt;/p&gt;
&lt;h3 id=&#34;方法2-改良的归并法&#34;&gt;方法2-改良的归并法&lt;/h3&gt;
&lt;p&gt;方法1是一种比较符合直觉的方法，更进一步，我们考虑每次多排除一些数，以提高算法的执行速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寻找中位数问题可以视为寻找第k大数问题的特殊情况&lt;/strong&gt;，现在设中位数是第k大的数为&lt;code&gt;Kth&lt;/code&gt;，我们每次比较k/2个数，就能每次排除掉k/2个数。随着被排除的数逐渐增多，k会逐渐变小，当k变为1的时候，比较最后一次，就找到了&lt;code&gt;Kth&lt;/code&gt;。由于k每次缩小一半，时间复杂度为O(log(m+n))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里面有一个关键问题，为什么比较步长是k/2&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;为了解释这个问题，先看一个例子，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;A：1，2，3，8  
B：4，5，6，7
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;有递增序列A和B，现在我们想找到第4大的数（即4），如果将比较步长设置为4，即直接比较7和8，会导致4,5,6,7全都被排除掉，最后无法找到4。所以我们必须设置合理的比较步长，来避免这种情况。&lt;/p&gt;
&lt;p&gt;下面说明为什么是k/2&lt;/p&gt;
&lt;p&gt;在对位于比较点的两个数做比较后，我们会将较小数及其之前的数排除掉。为了保证一定能够排除较小数及其之前的数，我们必须保证&lt;code&gt;Kth&lt;/code&gt;不在被排除的数中，换言之，&lt;strong&gt;我们一定不能让位于比较点的两个数都大于&lt;code&gt;Kth&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设有以下两个序列&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;A：a0,a1,...,am
B: b0,b1,...,bn
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;假设比较步长为p，位于比较点的两个数是&lt;code&gt;ap&lt;/code&gt;，&lt;code&gt;bp&lt;/code&gt;，现在对&lt;code&gt;Kth&lt;/code&gt;所在位置分情况讨论&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ap&lt;/code&gt;和&lt;code&gt;bp&lt;/code&gt;都在&lt;code&gt;Kth&lt;/code&gt;之前&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ap&lt;/code&gt;在&lt;code&gt;Kth&lt;/code&gt;之前，&lt;code&gt;bp&lt;/code&gt;在&lt;code&gt;Kth&lt;/code&gt;之后（即&lt;code&gt;Kth∈[b0,bp]&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ap&lt;/code&gt;在&lt;code&gt;Kth&lt;/code&gt;之后（即&lt;code&gt;Kth∈[a0,ap]&lt;/code&gt;），&lt;code&gt;bp&lt;/code&gt;在&lt;code&gt;Kth&lt;/code&gt;之前&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;情况1不做讨论，排除哪个都行。&lt;/p&gt;
&lt;p&gt;情况2和情况3是等价的，现在假设&lt;code&gt;Kth∈[a0,ap]&lt;/code&gt;，即&lt;code&gt;a0 &amp;lt;= kth &amp;lt;= ap&lt;/code&gt;，如果我们想排除&lt;code&gt;[b0,bp]&lt;/code&gt;，就必须保证&lt;code&gt;bp &amp;lt;= Kth &amp;lt;= ap&lt;/code&gt;，即不能让位于比较点的两个数都大于等于&lt;code&gt;Kth&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当比较步长p为k/2时，&lt;code&gt;[a0,ap]&lt;/code&gt;和&lt;code&gt;[b0,bp]&lt;/code&gt;加起来一共k个数，如果&lt;code&gt;ap&lt;/code&gt;和&lt;code&gt;bp&lt;/code&gt;都大于&lt;code&gt;Kth&lt;/code&gt;，&lt;code&gt;[a0,ap]&lt;/code&gt;和&lt;code&gt;[b0,bp]&lt;/code&gt;加起来一定会超过k个数，前后矛盾。所以当比较步长为k/2时必不可能出现比较点的两个数都大于&lt;code&gt;Kth&lt;/code&gt;这个情况，反之当比较步长大于k/2时，被比较的两个子序列的数字量大于k，就有可能出现这个情况。&lt;/p&gt;
&lt;p&gt;相应的，如果有三个有序数列，比较步长最长为k/3，有四个序列，比较步长最长为k/4，以此类推。&lt;/p&gt;
&lt;h3 id=&#34;方法3-二分法&#34;&gt;方法3-二分法&lt;/h3&gt;
&lt;p&gt;方法2是将问题转化为求第K大的数，而方法3是利用了中位数的以下性质：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中位数两边的数个数相等&lt;/li&gt;
&lt;li&gt;中位数左边最大的数小于右边最小的数、&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体方法是分别将序列1和序列2一分为2，将左序列1+左序列2视为左半部分，将右序列1+右序列2视为右半部分，保证左半部分的数字个数等于右半部分的数字个数，并且左半部分的最大值大于右半部分的最小值。&lt;/p&gt;
&lt;p&gt;那如何找到切分位置？在较短序列上进行二分搜索即可&lt;/p&gt;
&lt;h2 id=&#34;leetcode-10正则表达式匹配&#34;&gt;leetcode 10.正则表达式匹配&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个字符串s和一个字符规律p，请你来实现一个支持&#39;.&amp;lsquo;和&amp;rsquo;*&amp;lsquo;的正则表达式匹配。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;.&amp;lsquo;匹配任意单个字符&lt;/li&gt;
&lt;li&gt;&amp;lsquo;*&amp;lsquo;匹配零个或多个前面的那一个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所谓匹配，是要涵盖整个字符串s的，而不是部分字符串。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用动态规划求解&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将问题转化为求&lt;code&gt;f[i][j]&lt;/code&gt;的问题，&lt;code&gt;f[i][j]&lt;/code&gt;指字符串s的前i个字符和模式p的前j个字符是否匹配。&lt;/li&gt;
&lt;li&gt;以下是该问题的求解方程
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;1. 当p[j-1]不是&amp;#39;*&amp;#39;时，
    如果p[j-1]和s[i-1]匹配，
        f[i][j] = f[i-1][j-1]
    否则
        f[i][j] = false
2. 当p[j-1]是&amp;#39;*&amp;#39;时（要看&amp;#39;*&amp;#39;前面那个字符），
    如果p[j-2]不和s[i-1]匹配(字母和&amp;#39;*&amp;#39;的组合被干掉)，
        f[i][j] = f[i][j-2]
    否则，既可以字母和&amp;#39;*&amp;#39;的组合被干掉也可以s[i-1]被干掉
        f[i][j] = f[i][j-2] or f[i-1][j]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;当s和p都为空时，视为匹配，即&lt;code&gt;f[0][0]=True&lt;/code&gt;。p为空，s为空时，一定不匹配，即&lt;code&gt;f[0][x]=False&lt;/code&gt;。&lt;strong&gt;而s为空，p不为空时，不一定匹配，例如p为&lt;code&gt;a*a*&lt;/code&gt;时，可以和空串形成匹配，因此在循环时，i要从0开始，j可以从1开始&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;leetcode-5求最长回文子串&#34;&gt;leetcode 5.求最长回文子串&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个字符串s，找到s中最长的回文子串。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：s = &amp;ldquo;babad&amp;rdquo;&lt;br&gt;
输出：&amp;ldquo;bab&amp;rdquo;&lt;br&gt;
（&amp;ldquo;aba&amp;rdquo; 同样是符合题意的答案。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用动态规划求解&lt;/p&gt;
&lt;p&gt;将问题转换为求&lt;code&gt;f[i][j]&lt;/code&gt;的问题，&lt;code&gt;f[i][j]&lt;/code&gt;是指s的子串&lt;code&gt;s[i,j]&lt;/code&gt;是否为回文串，求&lt;code&gt;f[i][j]&lt;/code&gt;之前要先求出&lt;code&gt;f[i+1][j-1]&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;leetcode-11盛水最多的容器&#34;&gt;leetcode 11.盛水最多的容器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。&lt;/p&gt;
&lt;p&gt;找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;/p&gt;
&lt;p&gt;返回容器可以储存的最大水量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用双指针法求解，双指针的初始位置位于数组两端，不断向中间逼近，每次移动高度较低的指针（移动指针会导致容器底部变小，为了寻找更大的容积，就要舍弃较低的边，保留较高的边）&lt;/p&gt;
&lt;h2 id=&#34;leetcode-15三数之和&#34;&gt;leetcode 15.三数之和&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。&lt;/p&gt;
&lt;p&gt;注意：答案中不可以包含重复的三元组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三数之和要求对组合去重，这个问题和两数之和有所不同，在两数之和问题中，每个数只能属于一个组合，所以，要对组合去重，只要给已经构成组合的数打标记即可，不用对组合打标记。但是对三数之和问题不能采用这种去重方法，因为一个数可以属于多个组合，如果要采用打标记这种方式，必须对组合打标记，不能对数打标记。&lt;/p&gt;
&lt;p&gt;因此，通过打标记去重在三数之和问题中不可行&lt;/p&gt;
&lt;p&gt;采用排序+双指针的方法，可以在O(n^2)的时间复杂度内完成求解&lt;/p&gt;
&lt;h2 id=&#34;leetcode-23合并k个升序链表&#34;&gt;leetcode 23.合并K个升序链表&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个链表数组，每个链表都已经按升序排列。&lt;/p&gt;
&lt;p&gt;请你将所有链表合并到一个升序链表中，返回合并后的链表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设链表个数为k，节点总数为n&lt;/p&gt;
&lt;p&gt;方法1，从k个链表的开头各拿出一个节点，从这k个节点中选取一个最小的链接到大链表中，利用堆选取最小元素，堆操作的时间复杂度是O(logk)，一共n个节点，总的时间复杂度为O(nlogk)&lt;/p&gt;
&lt;p&gt;方法2，对k个链表进行两两归并，归并次数是logk，归并的时间复杂度是O(n)，总的时间复杂度是O(nlogk)&lt;/p&gt;
&lt;p&gt;方法2的归并策略是尽量降低归并次数，还有另外一种归并策略是尽量降低比较次数，具体方法是每次选取长度最短的两个序列进行归并，但是由于本题是对链表进行归并，无法快速获取序列长度，因此无法采用这种策略&lt;/p&gt;
&lt;h2 id=&#34;leetcode-31下一个排列&#34;&gt;leetcode 31.下一个排列&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个整数数组 nums，找出nums 的下一个排列。&lt;/p&gt;
&lt;p&gt;必须原地修改，只允许使用额外常数空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;思路&lt;/p&gt;
&lt;p&gt;如果序列最后两个元素是正序，直接交换这两个元素即可&lt;/p&gt;
&lt;p&gt;在剩下的情况中，每个排列都可以分成前后两个子序列a，b，并且子序列b是一个倒序序列&lt;/p&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;p&gt;[1,2,5,4,3] = a+b = [1,2]+[5,4,3]&lt;/p&gt;
&lt;p&gt;此时子序列b自己没有下一个排列，要想为nums找到下一个排列，必须把a的最后一个元素和b中的一个元素交换，这个元素必须刚好大于a。交换后，子序列b仍然是一个倒序序列，将b翻转，就完成了求解&lt;/p&gt;
&lt;p&gt;两次遍历，一次翻转，时间复杂度为O(n)，第二次遍历可以改成二分查找，但是总的时间复杂度仍然是O(n)&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
