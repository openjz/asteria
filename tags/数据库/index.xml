<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on 星星</title>
    <link>http://blog.shiwj.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on 星星</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 08 Jun 2022 12:29:06 +0800</lastBuildDate><atom:link href="http://blog.shiwj.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机中的时间</title>
      <link>http://blog.shiwj.top/posts/time/</link>
      <pubDate>Wed, 08 Jun 2022 12:29:06 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/time/</guid>
      <description>unix时间戳 #  unix时间戳是相对于UTC时间&amp;quot;1970年1月1日 00:00:00&amp;quot;所经过的秒数。由于是相对于UTC时间，全世界的计算机在同一时刻获取到的时间戳都是相同的。
2038年问题 #  相当一部分unix操作系统使用32位有符号整型保存时间戳，因此时间戳的值最大也只有2147483647，换算成UTC时间为&amp;quot;2038-01-19 03:14:07&amp;quot;，一旦超过这个时间，这些系统的时间戳就会变成一个无效值，可能会导致程序出错，这就是2038年问题。
 这有点类似于千年虫问题，2000年以前，很多计算机程序由于程序设计有问题，在时间超过2000年1月1日零点之后，程序会因为无法正确处理时间导致处理出错或程序崩溃（例如有些程序只用年份的后两位表示年份，导致2000年会被误认为是1900年）
 </description>
    </item>
    
    <item>
      <title>数据库事务</title>
      <link>http://blog.shiwj.top/posts/db-transaction/</link>
      <pubDate>Wed, 20 Apr 2022 11:57:47 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/db-transaction/</guid>
      <description>事务（transaction）的目的是要保证一连串数据操作的原子性，并能够支持操作回滚
事务的并发问题 #   脏读：当前事务可以读取到其他事务未提交的数据 不可重复读：当前事务前后两次使用相同的查询语句查到了不同的数据，原因是在事务执行过程中，有其他事务对这批数据做了增删改操作。如果当前事务的两次读操作分别发生在其他事务开始前和提交后，读到的数据不一致，这就不算脏读，属于不可重复读问题。 幻读：事务进行读操作发现数据不存在，试图插入数据，但是插入失败，或者事务发现数据存在，试图更新数据，但更新失败，原因是事务读数据后，有其他事务对数据做了增删操作。即使数据库能够保证不发生脏读和不可重复读,仍有可能发生幻读，现象是每次读数据结果都是不存在，但就是不能插入数据，或者是每次读数据结果都是存在，但就是更新不了。  </description>
    </item>
    
    <item>
      <title>mysql入门笔记</title>
      <link>http://blog.shiwj.top/posts/mysql-note/</link>
      <pubDate>Fri, 10 Dec 2021 10:09:46 +0800</pubDate>
      
      <guid>http://blog.shiwj.top/posts/mysql-note/</guid>
      <description>参考《mysql必知必会》
一、基本概念 #  模式（schema）：这个概念比较模糊，一个比较常见的定义是，schema是指数据库对象的集合，其中包括表、视图、存储过程、索引等。schema通常是指数据库或表的布局和结构等信息。
主键（primary key）：主键定义在表的一列上，用来唯一地标识每一行，因此主键的值不能重复，每一行对应的主键值都是唯一的。
 主键有几个使用习惯，（1）不更新主键，（2）一般把主键定义在自增id列上
 外键（foreign key）：外键是表中的一个字段，对应另一个表的主键。
 可伸缩性（scale），一个设计良好的数据库能够良好应对数据量的增加，我们把这种情况称为数据库的可伸缩性好，可伸缩性离不开外键的使用。
  检索性能可能会受多种因素影响：检索操作（子查询、联表查询&amp;hellip;），数据量，是否有索引或键
 子句（clause）：SQL由子句构成，例如from、order by等。
完全限定列名：表名.列名，video.md5
二、mysql工具 #  mysql安装包中自带一个命令行工具mysql，这是一个运行在命令行的mysql客户端。
 命令用;或\g结束，\G可以使横向表格纵向输出 输入help或\h查看帮助 输入quit或exit退出  mysql默认端口是3306
三、使用mysql #  一些关于数据库和表的命令：
 选择数据库：use xxx; 查看（show）  所有数据库：show databases; 所有表：show tables; 表的列：show columns from xxx;  和desc xxx;作用相同   服务器状态：show status; 权限：show grants; 数据库和表的创建语句：show create database/table xxx; 服务器错误和告警：show errors/warnings; help show    四、检索（select） #  简单select #  select field1 from table_hello; select field1,field2,field3 from table_hello; select * from table_hello; 字段前面可以加上表名，例如</description>
    </item>
    
  </channel>
</rss>
